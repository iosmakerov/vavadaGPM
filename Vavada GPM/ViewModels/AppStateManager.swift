import SwiftUI
import Combine

/// –ú–µ–Ω–µ–¥–∂–µ—Ä —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
@MainActor
class AppStateManager: ObservableObject {
    static let shared = AppStateManager()
    
    // MARK: - Published Properties
    
    @Published var isLoading = true
    @Published var shouldShowWebView = false
    @Published var webViewURL: String?
    @Published var error: Error?
    
    // MARK: - Init
    
    private init() {
        checkAppState()
    }
    
    // MARK: - Public Methods
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å —Å–æ—Å—Ç–æ—è–Ω–∏–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è –∏ –æ–ø—Ä–µ–¥–µ–ª–∏—Ç—å —á—Ç–æ –ø–æ–∫–∞–∑—ã–≤–∞—Ç—å
    func checkAppState() {
        Task {
            print("üîç [AppStateManager] Starting app state check...")
            isLoading = true
            error = nil
            
            do {
                let result = try await CloakingService.shared.checkCloaking()
                
                switch result {
                case .showWebView(let url):
                    print("‚úÖ [AppStateManager] Should show WebView with URL: \(url)")
                    shouldShowWebView = true
                    webViewURL = url
                case .showWhitePart:
                    print("‚ö™ [AppStateManager] Should show white part")
                    shouldShowWebView = false
                    webViewURL = nil
                }
                
            } catch {
                // –ü—Ä–∏ –æ—à–∏–±–∫–µ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å
                print("‚ùå [AppStateManager] Error: \(error.localizedDescription)")
                self.error = error
                shouldShowWebView = false
                webViewURL = nil
            }
            
            isLoading = false
            print("üèÅ [AppStateManager] App state check completed. Loading: false")
        }
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—É—é —á–∞—Å—Ç—å (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    func forceShowWhitePart() {
        shouldShowWebView = false
        webViewURL = nil
        isLoading = false
    }
    
    /// –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑–∞—Ç—å WebView (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    func forceShowWebView(with url: String) {
        shouldShowWebView = true
        webViewURL = url
        isLoading = false
    }
} 