import Foundation
import Network

@MainActor
class CloakingService: ObservableObject {
    private let userDefaultsManager = UserDefaultsManager.shared
    private let monitor = NWPathMonitor()
    
    init() {
        setupNetworkMonitor()
    }
    
    // MARK: - Main Cloaking Logic
    func checkAccess() async -> CloakingResult {
        print("üîç CloakingService: –ù–∞—á–∏–Ω–∞—é –ø—Ä–æ–≤–µ—Ä–∫—É –¥–æ—Å—Ç—É–ø–∞")
        
        #if DEBUG
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–µ —Ä–µ–∂–∏–º—ã –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
        if CloakingConstants.forceWebView {
            print("üß™ DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
            return .showWebView(url: CloakingConstants.trackerURL)
        }
        
        if CloakingConstants.forceStubApp {
            print("üß™ DEBUG: –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
            return .showStubApp
        }
        #endif
        
        // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è
        let sessionData = userDefaultsManager.getUserSessionData()
        print("üìÖ –î–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞: \(sessionData.daysFromFirstLaunch)")
        print("‚è∞ –ó–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: \(sessionData.hasDelayPassed)")
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–¥–µ—Ä–∂–∫—É (—Å –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å—é –º–æ–∫–∞–Ω–∏—è –≤ DEBUG)
        let delayPassed: Bool
        #if DEBUG
        if CloakingConstants.mockDelayDays >= 0 {
            delayPassed = CloakingConstants.mockDelayDays >= CloakingConstants.initialDelayDays
            print("üß™ DEBUG: –ú–æ–∫–∞–µ–º –¥–Ω–∏ (\(CloakingConstants.mockDelayDays)), –∑–∞–¥–µ—Ä–∂–∫–∞ –ø—Ä–æ–π–¥–µ–Ω–∞: \(delayPassed)")
        } else {
            delayPassed = sessionData.hasDelayPassed
        }
        #else
        delayPassed = sessionData.hasDelayPassed
        #endif
        
        guard delayPassed else {
            print("‚ùå –ó–∞–¥–µ—Ä–∂–∫–∞ –Ω–µ –ø—Ä–æ–π–¥–µ–Ω–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
            return .showStubApp
        }
        
        // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏–Ω—Ç–µ—Ä–Ω–µ—Ç —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ
        guard await checkInternetConnection() else {
            print("üåê –ù–µ—Ç –∏–Ω—Ç–µ—Ä–Ω–µ—Ç–∞, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
            return .showStubApp
        }
        
        // 3. –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç—Ä–µ–∫–µ—Ä—É
        print("üåç –î–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç—Ä–µ–∫–µ—Ä—É: \(CloakingConstants.trackerURL)")
        let response = await makeTrackerRequest()
        
        switch response.statusCode {
        case 200, 401:
            // 200 - OK, 401 - Qrator –∑–∞—â–∏—Ç–∞ (–Ω–æ –¥–æ—Å—Ç—É–ø –µ—Å—Ç—å)
            print("‚úÖ HTTP \(response.statusCode) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
            return .showWebView(url: CloakingConstants.trackerURL)
        case 404, 403:
            // 404 - Not Found, 403 - Forbidden (–∑–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞–Ω–Ω–æ–µ –≥–µ–æ)
            print("‚ùå HTTP \(response.statusCode) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
            return .showStubApp
        case 301, 302, 307, 308:
            // –†–µ–¥–∏—Ä–µ–∫—Ç—ã - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é
            print("üîÑ HTTP \(response.statusCode) - —Ä–µ–¥–∏—Ä–µ–∫—Ç, –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
            return .showWebView(url: CloakingConstants.trackerURL)
        default:
            print("‚ö†Ô∏è HTTP \(response.statusCode) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
            return .showStubApp
        }
    }
    
    // MARK: - Tracker Request
    private func makeTrackerRequest() async -> TrackerResponse {
        let startTime = CFAbsoluteTimeGetCurrent()
        
        do {
            // –°–æ–∑–¥–∞–µ–º –∑–∞–ø—Ä–æ—Å —Å –ø—Ä–∞–≤–∏–ª—å–Ω—ã–º–∏ –∑–∞–≥–æ–ª–æ–≤–∫–∞–º–∏
            var request = URLRequest(url: URL(string: CloakingConstants.trackerURL)!)
            request.httpMethod = "GET"
            request.timeoutInterval = CloakingConstants.requestTimeoutSeconds
            
            // –î–æ–±–∞–≤–ª—è–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –¥–ª—è –∏–º–∏—Ç–∞—Ü–∏–∏ —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±—Ä–∞—É–∑–µ—Ä–∞
            request.setValue(CloakingConstants.userAgent, forHTTPHeaderField: "User-Agent")
            request.setValue(CloakingConstants.acceptHeader, forHTTPHeaderField: "Accept")
            request.setValue(CloakingConstants.acceptLanguageHeader, forHTTPHeaderField: "Accept-Language")
            request.setValue("keep-alive", forHTTPHeaderField: "Connection")
            request.setValue("1", forHTTPHeaderField: "Upgrade-Insecure-Requests")
            
            print("üì° ===== –ó–ê–ü–†–û–° –ö –¢–†–ï–ö–ï–†–£ =====")
            print("üåç URL: \(CloakingConstants.trackerURL)")
            print("üìã Method: \(request.httpMethod ?? "GET")")
            print("‚è±Ô∏è Timeout: \(request.timeoutInterval)s")
            print("üìù Headers:")
            if let headers = request.allHTTPHeaderFields {
                for (key, value) in headers {
                    print("   \(key): \(value)")
                }
            }
            print("üöÄ –û—Ç–ø—Ä–∞–≤–ª—è–µ–º –∑–∞–ø—Ä–æ—Å...")
            
            let (data, response) = try await URLSession.shared.data(for: request)
            let responseTime = CFAbsoluteTimeGetCurrent() - startTime
            
            if let httpResponse = response as? HTTPURLResponse {
                print("üìä ===== –û–¢–í–ï–¢ –û–¢ –¢–†–ï–ö–ï–†–ê =====")
                print("üéØ Status Code: \(httpResponse.statusCode)")
                print("‚ö° Response Time: \(String(format: "%.2f", responseTime))s")
                print("üìç URL: \(httpResponse.url?.absoluteString ?? "N/A")")
                
                // –õ–æ–≥–∏—Ä—É–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏ –æ—Ç–≤–µ—Ç–∞
                print("üìã Response Headers:")
                for (key, value) in httpResponse.allHeaderFields {
                    print("   \(key): \(value)")
                }
                
                // –õ–æ–≥–∏—Ä—É–µ–º —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ –æ—Ç–≤–µ—Ç–∞ (–ø–µ—Ä–≤—ã–µ 500 —Å–∏–º–≤–æ–ª–æ–≤)
                if !data.isEmpty {
                    if let responseString = String(data: data, encoding: .utf8) {
                        let truncatedResponse = responseString.count > 500 
                            ? String(responseString.prefix(500)) + "..." 
                            : responseString
                        print("üìÑ Response Body (\(data.count) bytes):")
                        print(truncatedResponse)
                    } else {
                        print("üìÑ Response Body: \(data.count) bytes (binary data)")
                    }
                } else {
                    print("üìÑ Response Body: Empty")
                }
                
                print("üîö ===== –ö–û–ù–ï–¶ –û–¢–í–ï–¢–ê =====")
                
                // –ò–Ω—Ç–µ—Ä–ø—Ä–µ—Ç–∞—Ü–∏—è —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞
                switch httpResponse.statusCode {
                case 200:
                    print("‚úÖ HTTP 200: –î–æ—Å—Ç—É–ø —Ä–∞–∑—Ä–µ—à–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
                case 401:
                    print("üîê HTTP 401: –¢—Ä–µ–±—É–µ—Ç –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ (Qrator –∑–∞—â–∏—Ç–∞) - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
                case 404:
                    print("‚ùå HTTP 404: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
                case 301, 302, 307, 308:
                    print("üîÑ HTTP \(httpResponse.statusCode): –†–µ–¥–∏—Ä–µ–∫—Ç - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –≤–µ–±-–≤—å—é")
                case 403:
                    print("üö´ HTTP 403: –î–æ—Å—Ç—É–ø –∑–∞–ø—Ä–µ—â–µ–Ω - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å")
                default:
                    print("‚ö†Ô∏è HTTP \(httpResponse.statusCode): –ù–µ–æ–∂–∏–¥–∞–Ω–Ω—ã–π –∫–æ–¥ - –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é")
                }
                
                return TrackerResponse(statusCode: httpResponse.statusCode)
            } else {
                print("‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å HTTP –æ—Ç–≤–µ—Ç")
                print("‚ö° Response Time: \(String(format: "%.2f", responseTime))s")
                return TrackerResponse(statusCode: 0, error: CloakingError.invalidResponse)
            }
        } catch {
            let responseTime = CFAbsoluteTimeGetCurrent() - startTime
            print("‚ùå ===== –û–®–ò–ë–ö–ê –ó–ê–ü–†–û–°–ê =====")
            print("üí• Error: \(error)")
            print("üìù Localized Description: \(error.localizedDescription)")
            print("‚ö° Time: \(String(format: "%.2f", responseTime))s")
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–∞—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—è –æ–± –æ—à–∏–±–∫–µ
            if let urlError = error as? URLError {
                print("üîç URLError Code: \(urlError.code.rawValue)")
                print("üîç URLError Description: \(urlError.localizedDescription)")
            }
            
            print("üîö ===== –ö–û–ù–ï–¶ –û–®–ò–ë–ö–ò =====")
            return TrackerResponse(statusCode: 0, error: error)
        }
    }
    
    // MARK: - Network Check
    private func checkInternetConnection() async -> Bool {
        return await withCheckedContinuation { continuation in
            let monitor = NWPathMonitor()
            let queue = DispatchQueue(label: "NetworkMonitor")
            var hasResumed = false
            
            monitor.pathUpdateHandler = { path in
                if !hasResumed {
                    hasResumed = true
                    let isConnected = path.status == .satisfied
                    monitor.cancel()
                    continuation.resume(returning: isConnected)
                }
            }
            
            monitor.start(queue: queue)
            
            // –¢–∞–π–º–∞—É—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
            DispatchQueue.main.asyncAfter(deadline: .now() + 2) {
                if !hasResumed {
                    hasResumed = true
                    monitor.cancel()
                    continuation.resume(returning: false)
                }
            }
        }
    }
    
    private func setupNetworkMonitor() {
        let queue = DispatchQueue(label: "NetworkMonitor")
        monitor.start(queue: queue)
    }
    
    deinit {
        monitor.cancel()
    }
}

// MARK: - Custom Errors
enum CloakingError: Error, LocalizedError {
    case networkUnavailable
    case invalidResponse
    case timeoutReached
    
    var errorDescription: String? {
        switch self {
        case .networkUnavailable:
            return "–°–µ—Ç—å –Ω–µ–¥–æ—Å—Ç—É–ø–Ω–∞"
        case .invalidResponse:
            return "–ù–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã–π –æ—Ç–≤–µ—Ç –æ—Ç —Å–µ—Ä–≤–µ—Ä–∞"
        case .timeoutReached:
            return "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è"
        }
    }
} 