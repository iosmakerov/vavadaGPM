import Foundation

/// –°–µ—Ä–≤–∏—Å –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –∫–µ–π—Ç–∞—Ä–æ —Ç—Ä–µ–∫–µ—Ä–æ–º
class CloakingService {
    static let shared = CloakingService()
    
    // MARK: - Configuration
    
    /// URL –∫–µ–π—Ç–∞—Ä–æ —Ç—Ä–µ–∫–µ—Ä–∞ (–ª–µ–≥–∫–æ –∏–∑–º–µ–Ω–∏—Ç—å –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    private var trackerURL = "https://zhenazanag.pro/7L7RRMSF"
    
    /// –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π –¥–æ –∞–∫—Ç–∏–≤–∞—Ü–∏–∏ WebView (–Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º—ã–π –ø–∞—Ä–∞–º–µ—Ç—Ä)
    static let daysBeforeActivation = 3
    
    /// –í–†–ï–ú–ï–ù–ù–û: –û—Ç–∫–ª—é—á–∏—Ç—å –ø—Ä–æ–≤–µ—Ä–∫—É 3 –¥–Ω–µ–π (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ –≤ false –¥–ª—è –≤–∫–ª—é—á–µ–Ω–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏
    private let skipDaysCheck = true // TODO: –í–µ—Ä–Ω—É—Ç—å –≤ false –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
    
    // MARK: - Init
    private init() {}
    
    // MARK: - Public Methods
    
    /// –ü—Ä–æ–≤–µ—Ä–∏—Ç—å –∫–ª–æ–∞–∫–∏–Ω–≥ –∏ –≤–µ—Ä–Ω—É—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    func checkCloaking() async throws -> CloakingResult {
        print("üîê [CloakingService] Starting cloaking check...")
        print("üìÖ [CloakingService] Days before activation: \(Self.daysBeforeActivation)")
        
        // –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–æ–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É –¥–Ω–µ–π –µ—Å–ª–∏ —Ñ–ª–∞–≥ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω
        if skipDaysCheck {
            print("‚ö†Ô∏è [CloakingService] –í–†–ï–ú–ï–ù–ù–û: –ü—Ä–æ–≤–µ—Ä–∫–∞ 3 –¥–Ω–µ–π –û–¢–ö–õ–Æ–ß–ï–ù–ê (skipDaysCheck = true)")
        } else {
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º, –ø—Ä–æ—à–ª–æ –ª–∏ –Ω—É–∂–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π
            let hasPassed = StorageManager.shared.hasPassedDaysSinceFirstLaunch(Self.daysBeforeActivation)
            print("‚è±Ô∏è [CloakingService] Has passed required days: \(hasPassed)")
            
            guard hasPassed else {
                print("üö´ [CloakingService] Not enough days passed, showing white part")
                return .showWhitePart
            }
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–Ω—ã–π —Ä–µ–∑—É–ª—å—Ç–∞—Ç
        if let savedResult = StorageManager.shared.cloakingResult {
            print("üíæ [CloakingService] Found saved result: \(savedResult)")
            if savedResult, let url = StorageManager.shared.cloakingURL {
                print("üåê [CloakingService] Returning saved WebView URL: \(url)")
                return .showWebView(url: url)
            } else {
                print("‚ö™ [CloakingService] Saved result says show white part")
                return .showWhitePart
            }
        }
        
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç –∏ –±—ã–ª–∞ network error, –ø—Ä–æ–±—É–µ–º —Å–Ω–æ–≤–∞
        // –ï—Å–ª–∏ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –Ω–µ—Ç, –¥–µ–ª–∞–µ–º –∑–∞–ø—Ä–æ—Å –∫ —Ç—Ä–µ–∫–µ—Ä—É
        print("üåê [CloakingService] No saved result, fetching from tracker...")
        return try await fetchCloakingResult()
    }
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–∞—Å—Ç–æ–º–Ω—ã–π URL —Ç—Ä–µ–∫–µ—Ä–∞ (–¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è)
    func setTrackerURL(_ url: String) {
        trackerURL = url
    }
    
    // MARK: - Private Methods
    
    private func fetchCloakingResult() async throws -> CloakingResult {
        print("üåê [CloakingService] Starting request to tracker...")
        print("üîó [CloakingService] Tracker URL: \(trackerURL)")
        
        guard let url = URL(string: trackerURL) else {
            print("‚ùå [CloakingService] Invalid URL: \(trackerURL)")
            throw CloakingError.invalidURL
        }
        
        var request = URLRequest(url: url)
        request.timeoutInterval = 10.0
        request.httpMethod = "GET"
        
        print("üì§ [CloakingService] Sending GET request...")
        print("‚è±Ô∏è [CloakingService] Timeout: 10 seconds")
        
        do {
            let (data, response) = try await URLSession.shared.data(for: request)
            
            guard let httpResponse = response as? HTTPURLResponse else {
                print("‚ùå [CloakingService] Invalid response type")
                throw CloakingError.invalidResponse
            }
            
            print("üì• [CloakingService] Response received")
            print("üìä [CloakingService] Status code: \(httpResponse.statusCode)")
            print("üìã [CloakingService] Headers: \(httpResponse.allHeaderFields)")
            
            // –ü—ã—Ç–∞–µ–º—Å—è —Ä–∞—Å–ø–µ—á–∞—Ç–∞—Ç—å —Ç–µ–ª–æ –æ—Ç–≤–µ—Ç–∞
            if let responseString = String(data: data, encoding: .utf8) {
                print("üìÑ [CloakingService] Response body: \(responseString.prefix(200))...")
            }
            
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –æ—Ç–≤–µ—Ç —Å–æ–≥–ª–∞—Å–Ω–æ –Ω–æ–≤–æ–π –ª–æ–≥–∏–∫–µ
            switch httpResponse.statusCode {
            case 404:
                print("üö´ [CloakingService] Status 404 - Not Found")
                // –¢–æ–ª—å–∫–æ 404 –ø–æ–∫–∞–∑—ã–≤–∞–µ–º –±–µ–ª—É—é —á–∞—Å—Ç—å –∏ —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
                StorageManager.shared.saveCloakingResult(shouldShowWebView: false, url: nil)
                print("üíæ [CloakingService] Result saved: show white part")
                return .showWhitePart
                
            default:
                // –õ—é–±–æ–π –¥—Ä—É–≥–æ–π –∫–æ–¥ (–≤–∫–ª—é—á–∞—è 200, 401, –∏ —Ç.–¥.) - –ø—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL
                print("üìä [CloakingService] Status \(httpResponse.statusCode) - Looking for redirect URL")
                
                // –ü—ã—Ç–∞–µ–º—Å—è –∏–∑–≤–ª–µ—á—å URL –∏–∑ –æ—Ç–≤–µ—Ç–∞
                if let redirectURL = extractRedirectURL(from: httpResponse, data: data) {
                    print("üéØ [CloakingService] Found redirect URL: \(redirectURL)")
                    // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç –Ω–∞–≤—Å–µ–≥–¥–∞
                    StorageManager.shared.saveCloakingResult(shouldShowWebView: true, url: redirectURL)
                    print("üíæ [CloakingService] Result saved: show WebView")
                    return .showWebView(url: redirectURL)
                } else {
                    print("‚ö†Ô∏è [CloakingService] No redirect URL found, using tracker URL as fallback")
                    // –ï—Å–ª–∏ –Ω–µ –Ω–∞—à–ª–∏ URL –≤ –æ—Ç–≤–µ—Ç–µ, –∏—Å–ø–æ–ª—å–∑—É–µ–º —Å–∞–º URL —Ç—Ä–µ–∫–µ—Ä–∞
                    StorageManager.shared.saveCloakingResult(shouldShowWebView: true, url: trackerURL)
                    print("üíæ [CloakingService] Result saved: show WebView with tracker URL")
                    return .showWebView(url: trackerURL)
                }
            }
            
        } catch {
            // –ü—Ä–∏ –æ—à–∏–±–∫–µ —Å–µ—Ç–∏ –ù–ï —Å–æ—Ö—Ä–∞–Ω—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            print("‚ùå [CloakingService] Network error: \(error.localizedDescription)")
            StorageManager.shared.clearCloakingResult()
            print("üóëÔ∏è [CloakingService] Cleared cloaking result due to network error")
            throw CloakingError.networkError(error)
        }
    }
    
    private func extractRedirectURL(from response: HTTPURLResponse, data: Data) -> String? {
        print("üîç [CloakingService] Extracting redirect URL...")
        
        // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä—è–µ–º –∑–∞–≥–æ–ª–æ–≤–æ–∫ Location
        if let location = response.allHeaderFields["Location"] as? String {
            print("üìç [CloakingService] Found Location header: \(location)")
            return location
        }
        
        // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Å—Ç–æ–º–Ω—ã–µ –∑–∞–≥–æ–ª–æ–≤–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ –º–æ–∂–µ—Ç –∏—Å–ø–æ–ª—å–∑–æ–≤–∞—Ç—å –∫–µ–π—Ç–∞—Ä–æ
        if let redirectURL = response.allHeaderFields["X-Redirect-URL"] as? String {
            print("üìç [CloakingService] Found X-Redirect-URL header: \(redirectURL)")
            return redirectURL
        }
        
        // –ï—Å–ª–∏ –≤ –∑–∞–≥–æ–ª–æ–≤–∫–∞—Ö –Ω–µ—Ç, –ø—Ä–µ–¥–ø–æ–ª–∞–≥–∞–µ–º —á—Ç–æ URL –º–æ–∂–µ—Ç –±—ã—Ç—å –≤ —Ñ–∏–Ω–∞–ª—å–Ω–æ–º URL –ø–æ—Å–ª–µ —Ä–µ–¥–∏—Ä–µ–∫—Ç–æ–≤
        if let finalURL = response.url?.absoluteString,
           finalURL != trackerURL {
            print("üìç [CloakingService] Using final URL after redirects: \(finalURL)")
            return finalURL
        }
        
        // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ URL –≤ —Ç–µ–ª–µ –æ—Ç–≤–µ—Ç–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä, –≤ –º–µ—Ç–∞-—Ç–µ–≥–∞—Ö –∏–ª–∏ JavaScript —Ä–µ–¥–∏—Ä–µ–∫—Ç–∞—Ö)
        if let responseString = String(data: data, encoding: .utf8) {
            print("üîç [CloakingService] Searching for URL in response body...")
            
            // –ò—â–µ–º meta refresh
            let metaPattern = #"<meta[^>]*http-equiv\s*=\s*["']refresh["'][^>]*content\s*=\s*["']\d+;\s*url=([^"']+)["']"#
            if let regex = try? NSRegularExpression(pattern: metaPattern, options: .caseInsensitive),
               let match = regex.firstMatch(in: responseString, range: NSRange(location: 0, length: responseString.count)),
               match.numberOfRanges > 1 {
                let urlRange = match.range(at: 1)
                if let range = Range(urlRange, in: responseString) {
                    let foundURL = String(responseString[range])
                    print("üìç [CloakingService] Found meta refresh URL: \(foundURL)")
                    return foundURL
                }
            }
            
            // –ò—â–µ–º window.location –∏–ª–∏ location.href
            let jsPatterns = [
                #"window\.location\s*=\s*["']([^"']+)["']"#,
                #"location\.href\s*=\s*["']([^"']+)["']"#,
                #"window\.location\.href\s*=\s*["']([^"']+)["']"#
            ]
            
            for pattern in jsPatterns {
                if let regex = try? NSRegularExpression(pattern: pattern, options: .caseInsensitive),
                   let match = regex.firstMatch(in: responseString, range: NSRange(location: 0, length: responseString.count)),
                   match.numberOfRanges > 1 {
                    let urlRange = match.range(at: 1)
                    if let range = Range(urlRange, in: responseString) {
                        let foundURL = String(responseString[range])
                        print("üìç [CloakingService] Found JavaScript redirect URL: \(foundURL)")
                        return foundURL
                    }
                }
            }
        }
        
        print("‚ùå [CloakingService] No redirect URL found")
        return nil
    }
}

// MARK: - Models

enum CloakingResult {
    case showWebView(url: String)
    case showWhitePart
}

enum CloakingError: LocalizedError {
    case invalidURL
    case invalidResponse
    case networkError(Error)
    
    var errorDescription: String? {
        switch self {
        case .invalidURL:
            return "Invalid tracker URL"
        case .invalidResponse:
            return "Invalid response from tracker"
        case .networkError(let error):
            return "Network error: \(error.localizedDescription)"
        }
    }
} 