import Foundation

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —Ä–∞–±–æ—Ç—ã —Å –ª–æ–∫–∞–ª—å–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
class StorageManager {
    static let shared = StorageManager()
    
    private let userDefaults = UserDefaults.standard
    
    // MARK: - Keys
    private enum Keys {
        static let firstLaunchDate = "app.firstLaunchDate"
        static let cloakingResult = "app.cloakingResult"
        static let cloakingURL = "app.cloakingURL"
        static let wasNetworkError = "app.wasNetworkError"
    }
    
    // MARK: - Init
    private init() {}
    
    // MARK: - First Launch
    
    /// –î–∞—Ç–∞ –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
    var firstLaunchDate: Date? {
        get {
            userDefaults.object(forKey: Keys.firstLaunchDate) as? Date
        }
        set {
            userDefaults.set(newValue, forKey: Keys.firstLaunchDate)
        }
    }
    
    /// –ü—Ä–æ–≤–µ—Ä–∫–∞, –ø—Ä–æ—à–ª–æ –ª–∏ —É–∫–∞–∑–∞–Ω–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π —Å –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞
    func hasPassedDaysSinceFirstLaunch(_ days: Int) -> Bool {
        guard let firstLaunch = firstLaunchDate else {
            // –ï—Å–ª–∏ –Ω–µ—Ç –¥–∞—Ç—ã –ø–µ—Ä–≤–æ–≥–æ –∑–∞–ø—É—Å–∫–∞, —É—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –µ—ë
            let now = Date()
            print("üìÖ [StorageManager] No first launch date found, setting to: \(now)")
            firstLaunchDate = now
            return false
        }
        
        let daysPassed = Calendar.current.dateComponents([.day], from: firstLaunch, to: Date()).day ?? 0
        print("üìÖ [StorageManager] First launch: \(firstLaunch)")
        print("üìÖ [StorageManager] Days passed: \(daysPassed) / Required: \(days)")
        return daysPassed >= days
    }
    
    // MARK: - Cloaking Result
    
    /// –†–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–æ–∞–∫–∏–Ω–≥–∞ (true - –ø–æ–∫–∞–∑–∞—Ç—å WebView, false - –ø–æ–∫–∞–∑–∞—Ç—å –±–µ–ª—É—é —á–∞—Å—Ç—å)
    var cloakingResult: Bool? {
        get {
            guard userDefaults.object(forKey: Keys.cloakingResult) != nil else { return nil }
            return userDefaults.bool(forKey: Keys.cloakingResult)
        }
        set {
            if let value = newValue {
                userDefaults.set(value, forKey: Keys.cloakingResult)
            } else {
                userDefaults.removeObject(forKey: Keys.cloakingResult)
            }
        }
    }
    
    /// URL –¥–ª—è –∑–∞–≥—Ä—É–∑–∫–∏ –≤ WebView
    var cloakingURL: String? {
        get {
            userDefaults.string(forKey: Keys.cloakingURL)
        }
        set {
            userDefaults.set(newValue, forKey: Keys.cloakingURL)
        }
    }
    
    /// –§–ª–∞–≥, —É–∫–∞–∑—ã–≤–∞—é—â–∏–π –±—ã–ª–∞ –ª–∏ –æ—à–∏–±–∫–∞ —Å–µ—Ç–∏ –ø—Ä–∏ –ø–æ—Å–ª–µ–¥–Ω–µ–º –∑–∞–ø—Ä–æ—Å–µ
    var wasNetworkError: Bool {
        get {
            userDefaults.bool(forKey: Keys.wasNetworkError)
        }
        set {
            userDefaults.set(newValue, forKey: Keys.wasNetworkError)
        }
    }
    
    /// –°–æ—Ö—Ä–∞–Ω–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–æ–∞–∫–∏–Ω–≥–∞
    func saveCloakingResult(shouldShowWebView: Bool, url: String?) {
        cloakingResult = shouldShowWebView
        cloakingURL = url
        wasNetworkError = false
    }
    
    /// –û—á–∏—Å—Ç–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç –∫–ª–æ–∞–∫–∏–Ω–≥–∞ (–∏—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –ø—Ä–∏ network error)
    func clearCloakingResult() {
        cloakingResult = nil
        cloakingURL = nil
        wasNetworkError = true
    }
} 