import UIKit

/// –ú–µ–Ω–µ–¥–∂–µ—Ä –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–µ–π —ç–∫—Ä–∞–Ω–∞ –¥–ª—è iOS 16.6+
class OrientationManager {
    static let shared = OrientationManager()
    
    private init() {}
    
    /// –¢–µ–∫—É—â–∞—è –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º–∞—è –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—è
    private var currentOrientation: UIInterfaceOrientationMask = .portrait
    
    /// –£—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    func setSupportedOrientations(_ orientations: UIInterfaceOrientationMask) {
        print("üîÑ [OrientationManager] Setting orientations: \(orientations)")
        currentOrientation = orientations
    }
    
    /// –ü–æ–ª—É—á–∏—Ç—å —Ç–µ–∫—É—â–∏–µ –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    func supportedOrientations() -> UIInterfaceOrientationMask {
        return currentOrientation
    }
    
    /// –†–∞–∑–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å –≤—Å–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ (–¥–ª—è WebView)
    func unlockAllOrientations() {
        // –î–ª—è iPhone –∏—Å–ø–æ–ª—å–∑—É–µ–º –≤—Å–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ –∫—Ä–æ–º–µ –ø–µ—Ä–µ–≤–µ—Ä–Ω—É—Ç–æ–π
        let orientations: UIInterfaceOrientationMask = UIDevice.current.userInterfaceIdiom == .pad ? .all : .allButUpsideDown
        print("üîÑ [OrientationManager] Unlocking orientations: \(orientations)")
        setSupportedOrientations(orientations)
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ä–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ windowScene
        forceUpdateSupportedOrientations(orientations)
    }
    
    /// –ó–∞–±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å —Ç–æ–ª—å–∫–æ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    func lockToPortrait() {
        print("üîÑ [OrientationManager] Locking to portrait")
        setSupportedOrientations(.portrait)
        
        // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –±–ª–æ–∫–∏—Ä—É–µ–º –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
        forceUpdateSupportedOrientations(.portrait)
        
        // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
        forcePortraitOrientation()
    }
    
    // MARK: - –ö–†–ò–¢–ò–ß–ù–´–ï –ú–ï–¢–û–î–´ –¥–ª—è iOS 16.6+
    
    /// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ—Ç –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ windowScene (iOS 16+)
    private func forceUpdateSupportedOrientations(_ orientations: UIInterfaceOrientationMask) {
        print("üîÑ [OrientationManager] FORCE updating supported orientations: \(orientations)")
        
        DispatchQueue.main.async {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é windowScene
            guard let windowScene = UIApplication.shared.connectedScenes
                .compactMap({ $0 as? UIWindowScene })
                .first(where: { $0.activationState == .foregroundActive }) else {
                print("‚ùå [OrientationManager] No active windowScene found")
                return
            }
            
            print("üîÑ [OrientationManager] Found active windowScene: \(windowScene)")
            
            // –û–±–Ω–æ–≤–ª—è–µ–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞–µ–º—ã–µ –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏ —á–µ—Ä–µ–∑ geometryRequest
            let geometryPreferences = UIWindowScene.GeometryPreferences.iOS(interfaceOrientations: orientations)
            windowScene.requestGeometryUpdate(geometryPreferences) { error in
                if error != nil {
                    print("‚ùå [OrientationManager] Error updating geometry: \(error)")
                } else {
                    print("‚úÖ [OrientationManager] Successfully updated supported orientations")
                }
            }
            
            // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω–æ–µ —É–≤–µ–¥–æ–º–ª–µ–Ω–∏–µ —Å–∏—Å—Ç–µ–º–µ
            NotificationCenter.default.post(name: UIDevice.orientationDidChangeNotification, object: nil)
        }
    }
    
    /// –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ—Ç —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏—é
    private func forcePortraitOrientation() {
        print("üîÑ [OrientationManager] FORCE rotating to portrait")
        
        DispatchQueue.main.async {
            // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—É—é windowScene
            guard let windowScene = UIApplication.shared.connectedScenes
                .compactMap({ $0 as? UIWindowScene })
                .first(where: { $0.activationState == .foregroundActive }) else {
                print("‚ùå [OrientationManager] No active windowScene for rotation")
                return
            }
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–æ–≤–æ—Ä–∞—á–∏–≤–∞–µ–º –≤ –ø–æ—Ä—Ç—Ä–µ—Ç–Ω—É—é
            let geometryPreferences = UIWindowScene.GeometryPreferences.iOS(
                interfaceOrientations: .portrait
            )
            
            windowScene.requestGeometryUpdate(geometryPreferences) { error in
                if error != nil {
                    print("‚ùå [OrientationManager] Error forcing portrait: \(error)")
                } else {
                    print("‚úÖ [OrientationManager] Successfully forced portrait orientation")
                }
            }
        }
    }
    
    /// –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–π –º–µ—Ç–æ–¥ –¥–ª—è –æ—Ç–ª–∞–¥–∫–∏ —Ç–µ–∫—É—â–µ–π –æ—Ä–∏–µ–Ω—Ç–∞—Ü–∏–∏
    func logCurrentState() {
        DispatchQueue.main.async {
            if let windowScene = UIApplication.shared.connectedScenes
                .compactMap({ $0 as? UIWindowScene })
                .first(where: { $0.activationState == .foregroundActive }) {
                
                print("üì± [OrientationManager] Current interface orientation: \(windowScene.interfaceOrientation.rawValue)")
                print("üì± [OrientationManager] Supported orientations: \(self.currentOrientation.rawValue)")
            }
        }
    }
} 