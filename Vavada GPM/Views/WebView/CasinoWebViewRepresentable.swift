import SwiftUI
import WebKit

/// UIViewRepresentable –æ–±–µ—Ä—Ç–∫–∞ –¥–ª—è WKWebView —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
struct CasinoWebViewRepresentable: UIViewRepresentable {
    // –°—Ç–∞—Ç–∏—á–µ—Å–∫–∏–π –ø—Ä–æ—Ü–µ—Å—Å –ø—É–ª –∏ dataStore –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è —Å–µ—Å—Å–∏–∏ –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
    static let sharedProcessPool = WKProcessPool()
    static let persistentDataStore = WKWebsiteDataStore.default()
    
    let url: URL
    @Binding var canGoBack: Bool
    @Binding var canGoForward: Bool
    let webViewStore: WebViewStore
    
    func makeCoordinator() -> Coordinator {
        Coordinator(self)
    }
    
    func makeUIView(context: Context) -> WKWebView {
        // –°–æ–∑–¥–∞–µ–º –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å –Ω–∞—Å—Ç—Ä–æ–π–∫–∞–º–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
        let configuration = createWebViewConfiguration()
        
        // –°–æ–∑–¥–∞–µ–º WebView
        let webView = WKWebView(frame: .zero, configuration: configuration)
        webView.navigationDelegate = context.coordinator
        webView.uiDelegate = context.coordinator
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
        webView.allowsBackForwardNavigationGestures = true
        webView.scrollView.isScrollEnabled = true
        webView.scrollView.bounces = true
        
        // –ó–∞–≥—Ä—É–∂–∞–µ–º URL
        let request = URLRequest(url: url)
        webView.load(request)
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º —Å—Å—ã–ª–∫—É –Ω–∞ WebView –≤ –∫–æ–æ—Ä–¥–∏–Ω–∞—Ç–æ—Ä–µ
        context.coordinator.webView = webView
        
        // –°–æ—Ö—Ä–∞–Ω—è–µ–º WebView –≤ store
        webViewStore.webView = webView
        
        return webView
    }
    
    func updateUIView(_ webView: WKWebView, context: Context) {
        // –û–±–Ω–æ–≤–ª–µ–Ω–∏—è –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è
    }
    
    private func createWebViewConfiguration() -> WKWebViewConfiguration {
        print("üîß [WebView] Creating WebView configuration with persistent storage")
        let configuration = WKWebViewConfiguration()
        
        // –ö–†–ò–¢–ò–ß–ù–û: –ò—Å–ø–æ–ª—å–∑—É–µ–º —Å—Ç–∞—Ç–∏—á–µ—Å–∫–∏–µ –æ–±—ä–µ–∫—Ç—ã –¥–ª—è —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏—è –º–µ–∂–¥—É –∑–∞–ø—É—Å–∫–∞–º–∏
        configuration.websiteDataStore = Self.persistentDataStore
        configuration.processPool = Self.sharedProcessPool
        
        print("üç™ [WebView] Using persistent dataStore: \(Self.persistentDataStore)")
        print("üîÑ [WebView] Using shared processPool: \(Self.sharedProcessPool)")
        
        // –í–∫–ª—é—á–∞–µ–º JavaScript
        configuration.preferences.javaScriptEnabled = true
        configuration.preferences.javaScriptCanOpenWindowsAutomatically = true
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ø—Ä–∞–≤–∏–ª—å–Ω–æ–π —Ä–∞–±–æ—Ç—ã —Å –º–µ–¥–∏–∞
        configuration.allowsInlineMediaPlayback = true
        configuration.mediaTypesRequiringUserActionForPlayback = []
        
        // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
        if #available(iOS 14.0, *) {
            configuration.defaultWebpagePreferences.allowsContentJavaScript = true
        }
        
        // –ù–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –ª—É—á—à–µ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
        configuration.suppressesIncrementalRendering = false
        configuration.allowsPictureInPictureMediaPlayback = true
        
        // User Agent –¥–ª—è —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏ —Å –∫–∞–∑–∏–Ω–æ
        configuration.applicationNameForUserAgent = "Mozilla/5.0 (iPhone; CPU iPhone OS 15_0 like Mac OS X) AppleWebKit/605.1.15 (KHTML, like Gecko) Version/15.0 Mobile/15E148 Safari/604.1"
        
        // –í–∫–ª—é—á–∞–µ–º –ø–æ–¥–¥–µ—Ä–∂–∫—É –∏–≥—Ä–æ–≤—ã—Ö –ø—Ä–æ–≤–∞–π–¥–µ—Ä–æ–≤
        let contentController = WKUserContentController()
        
        // JavaScript –¥–ª—è –æ–ø—Ç–∏–º–∏–∑–∞—Ü–∏–∏ —Ä–∞–±–æ—Ç—ã —Å –∫–∞–∑–∏–Ω–æ
        let script = """
        // –û—Ç–∫–ª—é—á–∞–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –Ω–∞ –∞–≤—Ç–æ–≤–æ—Å–ø—Ä–æ–∏–∑–≤–µ–¥–µ–Ω–∏–µ
        document.addEventListener('DOMContentLoaded', function() {
            var videos = document.querySelectorAll('video');
            videos.forEach(function(video) {
                video.muted = false;
            });
        });
        
        // –ü–æ–¥–¥–µ—Ä–∂–∫–∞ –ø–æ–ª–Ω–æ—ç–∫—Ä–∞–Ω–Ω–æ–≥–æ —Ä–µ–∂–∏–º–∞
        document.documentElement.webkitRequestFullscreen = document.documentElement.webkitRequestFullscreen || document.documentElement.requestFullscreen;
        """
        
        let userScript = WKUserScript(source: script, injectionTime: .atDocumentEnd, forMainFrameOnly: false)
        contentController.addUserScript(userScript)
        configuration.userContentController = contentController
        
        return configuration
    }
    
    // MARK: - Coordinator
    
    class Coordinator: NSObject, WKNavigationDelegate, WKUIDelegate {
        var parent: CasinoWebViewRepresentable
        weak var webView: WKWebView?
        
        init(_ parent: CasinoWebViewRepresentable) {
            self.parent = parent
        }
        
        // MARK: - WKNavigationDelegate
        
        func webView(_ webView: WKWebView, didStartProvisionalNavigation navigation: WKNavigation!) {
            updateNavigationState(webView)
        }
        
        func webView(_ webView: WKWebView, didFinish navigation: WKNavigation!) {
            updateNavigationState(webView)
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏ –ª–æ–≥–∏—Ä—É–µ–º —Å–æ—Å—Ç–æ—è–Ω–∏–µ –∫—É–∫–∏
            checkCookieStatus(webView)
            
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫—É–∫–∏ –ø–æ—Å–ª–µ –∑–∞–≥—Ä—É–∑–∫–∏ –∫–∞–∂–¥–æ–π —Å—Ç—Ä–∞–Ω–∏—Ü—ã
            saveCookiesManually(webView)
        }
        
        func webView(_ webView: WKWebView, didFail navigation: WKNavigation!, withError error: Error) {
            updateNavigationState(webView)
        }
        
        func webView(_ webView: WKWebView, decidePolicyFor navigationAction: WKNavigationAction, decisionHandler: @escaping (WKNavigationActionPolicy) -> Void) {
            // –†–∞–∑—Ä–µ—à–∞–µ–º –≤—Å–µ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ –¥–ª—è –∫–∞–∑–∏–Ω–æ
            decisionHandler(.allow)
        }
        
        // MARK: - WKUIDelegate
        
        func webView(_ webView: WKWebView, createWebViewWith configuration: WKWebViewConfiguration, for navigationAction: WKNavigationAction, windowFeatures: WKWindowFeatures) -> WKWebView? {
            // –û—Ç–∫—Ä—ã–≤–∞–µ–º —Å—Å—ã–ª–∫–∏ –≤ —Ç–æ–º –∂–µ WebView
            if navigationAction.targetFrame == nil {
                webView.load(navigationAction.request)
            }
            return nil
        }
        
        func webView(_ webView: WKWebView, runJavaScriptAlertPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping () -> Void) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript alert
            if let rootViewController = UIApplication.shared.windows.first?.rootViewController {
                let alert = UIAlertController(title: nil, message: message, preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "OK", style: .default) { _ in
                    completionHandler()
                })
                rootViewController.present(alert, animated: true)
            } else {
                completionHandler()
            }
        }
        
        func webView(_ webView: WKWebView, runJavaScriptConfirmPanelWithMessage message: String, initiatedByFrame frame: WKFrameInfo, completionHandler: @escaping (Bool) -> Void) {
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ JavaScript confirm
            if let rootViewController = UIApplication.shared.windows.first?.rootViewController {
                let alert = UIAlertController(title: nil, message: message, preferredStyle: .alert)
                alert.addAction(UIAlertAction(title: "Cancel", style: .cancel) { _ in
                    completionHandler(false)
                })
                alert.addAction(UIAlertAction(title: "OK", style: .default) { _ in
                    completionHandler(true)
                })
                rootViewController.present(alert, animated: true)
            } else {
                completionHandler(false)
            }
        }
        
        // MARK: - Helper Methods
        
        private func updateNavigationState(_ webView: WKWebView) {
            parent.canGoBack = webView.canGoBack
            parent.canGoForward = webView.canGoForward
        }
        
        private func checkCookieStatus(_ webView: WKWebView) {
            webView.configuration.websiteDataStore.httpCookieStore.getAllCookies { cookies in
                DispatchQueue.main.async {
                    print("üç™ [WebView] Current cookies count: \(cookies.count)")
                    for cookie in cookies.prefix(5) {
                        print("üç™ [WebView] Cookie: \(cookie.name) = \(cookie.value.prefix(20))... for domain: \(cookie.domain)")
                    }
                }
            }
        }
        
        private func saveCookiesManually(_ webView: WKWebView) {
            // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ —Å–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∫—É–∫–∏ —Å –ø–æ—Å—Ç–æ—è–Ω–Ω—ã–º —Ö—Ä–∞–Ω–∏–ª–∏—â–µ–º
            let cookieStore = webView.configuration.websiteDataStore.httpCookieStore
            
            // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∫—É–∫–∏ –∏ —É–±–µ–∂–¥–∞–µ–º—Å—è —á—Ç–æ –æ–Ω–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
            cookieStore.getAllCookies { cookies in
                print("üíæ [WebView] Manually saving \(cookies.count) cookies")
                
                // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –ø–µ—Ä–µ—Å–æ—Ö—Ä–∞–Ω—è–µ–º –∫–∞–∂–¥—É—é –∫—É–∫—É
                for cookie in cookies {
                    cookieStore.setCookie(cookie) {
                        // –ö—É–∫–∏ —Å–æ—Ö—Ä–∞–Ω–µ–Ω—ã
                    }
                }
            }
        }
    }
}

// MARK: - WebView Navigation Extension

extension CasinoWebViewRepresentable.Coordinator {
    func goBack() {
        webView?.goBack()
    }
} 